<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Groups</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background: #f0f2f5;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      margin: 0;
      text-align: center;
      padding: 20px;
      box-sizing: border-box;
      position: relative;
    }
    .visit-count {
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 1.2em;
      color: #333;
      background-color: #fff;
      padding: 10px;
      border-radius: 5px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    .button-container {
      margin-bottom: 20px;
    }
    .toggle-button, .home-button {
      padding: 10px 20px;
      font-size: 1.2em;
      color: white;
      background-color: #201f1f;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
      margin: 5px;
    }
    .toggle-button:hover, .home-button:hover {
      background-color: #2a2828;
    }
    .cards-grid {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      width: 100%;
      max-width: 1200px;
      margin-bottom: 50px;
      transition: transform 0.3s ease-in-out;
    }
    .group-container {
      perspective: 1000px;
      margin: 10px;
      flex: 1 1 calc(20% - 20px); /* 5 per row with spacing */
      box-sizing: border-box;
    }
    .card-stack {
      position: relative;
      width: 100%;
      height: 250px; /* Adjust height as needed */
    }
    .card {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      transform-style: preserve-3d;
      transition: transform 0.6s, opacity 0.6s;
      aspect-ratio: 5 / 7; /* Maintains the card's aspect ratio */
      cursor: pointer;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      opacity: 1;
      margin-top: 15px; /* Adjust margin as needed */
    }
    .card:hover {
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    .card.flipped .front {
      transform: rotateY(180deg);
    }
    .card.flipped .back {
      transform: rotateY(0deg);
    }
    .card .front, .card .back {
      position: absolute;
      width: 100%;
      height: 100%;
      backface-visibility: hidden;
      border-radius: 8px;
      top: 0;
      left: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      overflow: hidden;
      padding: 10px;
      box-sizing: border-box;
      transition: transform 0.6s;
    }
    .card .front {
      background: #ff7e5f;
      z-index: 2;
      transform: rotateY(0deg);
      color: white;
    }
    .card .front img {
      max-width: 100px;
      max-height: 100px;
      margin-bottom: 15px;
      box-shadow: 0 0 10px 3px rgba(255, 255, 255, 0.7);
    }
    .card .back {
      background-color: white;
      transform: rotateY(-180deg);
      color: black;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      border: 1px solid #ccc;
    }
    .card .back .content {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      height: 100%;
      overflow: hidden;
    }
    .card .back h2 {
      font-size: clamp(1em, 2.5vw, 1.3em);
      margin: 10px 0;
      padding: 0;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    .card .back p {
      margin: 4.5px 13px;
      padding: 0;
      max-width: 100%;
      text-align: justify;
      overflow: hidden;
    }
    .card .back p.goal-desc {
      font-size: clamp(0.7em, 1.5vw, 0.9em);
    }
    .main-title {
      text-align: center;
      margin-bottom: 20px;
    }
    .main-title h1 {
      font-size: 2.5em;
      color: #201f1f;
      margin: 5px 0;
    }
    .main-title h2 {
      font-size: 1.8em;
      color: #201f1f;
      margin: 5px 0;
    }
    .main-title h3 {
      font-size: 1.5em;
      color: #201f1f;
      margin: 5px 0;
    }
    .like-dislike {
      display: flex;
      justify-content: center;
      margin-top: 10px;
    }
    .like-dislike img {
      width: 24px;
      height: 24px;
      margin: 0 10px;
      cursor: pointer;
      transition: transform 0.2s;
    }
    .like-dislike img:hover {
      transform: scale(1.2);
    }
    .modal-notification {
      position: fixed;
      bottom: 10px;
      right: 10px;
      background: #333;
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      opacity: 0;
      transition: opacity 0.5s;
      z-index: 1000;
    }
    .modal-notification.show {
      opacity: 1;
    }
    .fixed-footer {
      position: relative;
      bottom: 0;
      width: 100%;
      background-color: #201f1f;
      color: white;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 20px;
      box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.1);
      z-index: 1000;
    }
    .fixed-footer .class-code {
      font-size: 1.2em;
    }
    .fixed-footer .zoom-button {
      font-size: 2em;
      background-color: transparent;
      border: none;
      color: white;
      cursor: pointer;
      transition: color 0.3s;
    }
    .fixed-footer .zoom-button:hover {
      color: #ccc;
    }
    @media (max-width: 1200px) {
      .group-container {
        flex: 1 1 calc(25% - 20px); /* 4 per row on smaller screens */
      }
    }
    @media (max-width: 992px) {
      .group-container {
        flex: 1 1 calc(33.33% - 20px); /* 3 per row on medium screens */
      }
    }
    @media (max-width: 768px) {
      .group-container {
        flex: 1 1 calc(50% - 20px); /* 2 per row on small screens */
      }
    }
    @media (max-width: 576px) {
      .group-container {
        flex: 1 1 100%; /* 1 per row on extra small screens */
      }
    }
  </style>
</head>
<body>
  <div class="main-title">
    <h1>Future Of Work</h1>
    <h2>Sustainability Innovation Camp</h2>
    <h3>Groups</h3>
  </div>
  <div class="button-container">
    <button class="toggle-button" onclick="toggleFlip()">Flip Card</button>
    <button class="home-button" onclick="window.location.href='/'">Home</button>
  </div>
  <div class="visit-count">
    Visits: <%= visitCount %>
  </div>
  <div class="cards-grid">
    <% groups.forEach((group, groupIndex) => { %>
      <div class="group-container">
        <div class="card-stack" id="stack-<%= groupIndex %>">
          <% if (Array.isArray(group.problems)) { %>
            <% group.problems.forEach((problem, cardIndex) => { %>
              <div class="card" id="card-<%= groupIndex %>-<%= cardIndex %>" style="z-index: <%= group.problems.length - cardIndex %>;">
                <div class="front" style="background: <%= problem.color %>;">
                  <% if (problem && problem.SDG) { %>
                    <img src="https://raw.githubusercontent.com/favourch/sdg-logos/main/<%= problem.SDG %>.png" alt="SDG Logo" loading="lazy">
                  <% } %>
                </div>
                <div class="back">
                  <div class="content">
                    <h2><%= group.name %></h2>
                    <% if (problem) { %>
                      <p class="problem-statement"><%= problem.problem_statement %></p>
                      <p class="goal-desc"><strong>Goal:</strong> <%= problem.goalTitle %></p>
                    <% } else { %>
                      <p>No problem assigned</p>
                    <% } %>
                    <div class="like-dislike">
                      <img src="https://img.icons8.com/ios-filled/50/000000/facebook-like.png" alt="Like" class="like-button" onclick="likeCard('<%= groupIndex %>', '<%= cardIndex %>', '<%= code %>')">
                      <img src="https://img.icons8.com/ios-filled/50/000000/thumbs-down.png" alt="Dislike" class="dislike-button" onclick="dislikeCard('<%= groupIndex %>', '<%= cardIndex %>', '<%= code %>')">
                    </div>
                  </div>
                </div>
              </div>
            <% }); %>
          <% } else { %>
            <div class="card" style="z-index: 1;">
              <div class="back">
                <div class="content">
                  <h2><%= group.name %></h2>
                  <p>No problems assigned</p>
                </div>
              </div>
            </div>
          <% } %>
        </div>
      </div>
    <% }); %>
  </div>
  <div class="modal-notification" id="notification-modal"></div>
  <div class="fixed-footer">
    <div class="class-code">
      Class Code: <%= code %>
    </div>
    <div>
      <button class="zoom-button zoom-out" onclick="zoomOut()">-</button>
      <button class="zoom-button zoom-in" onclick="zoomIn()">+</button>
    </div>
  </div>
  <script src="https://hammerjs.github.io/dist/hammer.min.js"></script>
  <script>
    let zoomLevel = 1;
    const pageCode = '<%= code %>';

    function toggleFlip() {
      const cards = document.querySelectorAll('.card');
      cards.forEach(card => {
        card.classList.toggle('flipped');
      });
    }

    function zoomIn() {
      zoomLevel += 0.1;
      adjustZoom();
    }

    function zoomOut() {
      zoomLevel -= 0.1;
      if (zoomLevel < 1) zoomLevel = 1;
      adjustZoom();
    }

    function adjustZoom() {
      const grid = document.querySelector('.cards-grid');
      grid.style.transform = `scale(${zoomLevel})`;
      grid.style.transition = 'transform 0.3s ease-in-out';
    }

    function showNotification(message) {
      const modal = document.getElementById('notification-modal');
      modal.textContent = message;
      modal.classList.add('show');
      setTimeout(() => {
        modal.classList.remove('show');
      }, 2000);
    }

    function likeCard(groupIndex, cardIndex, code) {
      document.querySelector(`#card-${groupIndex}-${cardIndex} .like-button`).style.display = 'none';
      document.querySelector(`#card-${groupIndex}-${cardIndex} .dislike-button`).style.display = 'none';
      const key = `${code}-liked-${groupIndex}-${cardIndex}`;
      localStorage.setItem(key, 'true');
      fetch(`/like/${code}/${groupIndex}/${cardIndex}`, {
        method: 'POST'
      }).then(response => {
        if (response.ok) {
          showNotification('Liked!');
        } else {
          showNotification('Error liking the card.');
          localStorage.removeItem(key);
          document.querySelector(`#card-${groupIndex}-${cardIndex} .like-button`).style.display = 'block';
          document.querySelector(`#card-${groupIndex}-${cardIndex} .dislike-button`).style.display = 'block';
        }
      });
    }

    function dislikeCard(groupIndex, cardIndex, code) {
      const card = document.getElementById(`card-${groupIndex}-${cardIndex}`);
      card.style.opacity = 0;
      setTimeout(() => {
        card.remove();
      }, 600);
      fetch(`/dislike/${code}/${groupIndex}/${cardIndex}`, {
        method: 'POST'
      }).then(response => {
        if (response.ok) {
          showNotification('Disliked!');
        } else {
          showNotification('Error disliking the card.');
          card.style.opacity = 1;
        }
      });
    }

    function adjustTextSize() {
      const elements = document.querySelectorAll('.problem-statement, .goal-desc');
      elements.forEach(el => {
        let fontSize = parseInt(window.getComputedStyle(el).fontSize);
        while (el.scrollWidth > el.clientWidth || el.scrollHeight > el.clientHeight) {
          fontSize--;
          el.style.fontSize = fontSize + 'px';
          if (fontSize <= 10) break;
        }
      });
    }

    function checkLikes() {
      document.querySelectorAll('.card').forEach((card) => {
        const ids = card.id.split('-');
        const groupIndex = ids[1];
        const cardIndex = ids[2];
        const likeKey = `${pageCode}-liked-${groupIndex}-${cardIndex}`;
        const dislikeKey = `${pageCode}-disliked-${groupIndex}-${cardIndex}`;
        if (localStorage.getItem(likeKey) || localStorage.getItem(dislikeKey)) {
          card.querySelector('.like-button').style.display = 'none';
          card.querySelector('.dislike-button').style.display = 'none';
        }
      });
    }

    function addSwipeFunctionality() {
      document.querySelectorAll('.card-stack').forEach((stack, groupIndex) => {
        const hammer = new Hammer(stack);
        hammer.on('swipeleft swiperight', (ev) => {
          const topCard = stack.querySelector('.card');
          if (topCard) {
            topCard.style.transition = 'transform 0.3s, opacity 0.3s';
            topCard.style.transform = ev.type === 'swipeleft' ? 'translateX(-100%)' : 'translateX(100%)';
            setTimeout(() => {
              stack.appendChild(topCard);
              topCard.style.transition = 'none';
              topCard.style.transform = 'none';
              stack.querySelectorAll('.card').forEach((card, index) => {
                card.style.zIndex = stack.childElementCount - index;
              });
            }, 300);
          }
        });
      });
    }

    window.addEventListener('resize', adjustTextSize);
    window.addEventListener('DOMContentLoaded', () => {
      adjustTextSize();
      checkLikes();
      addSwipeFunctionality();
    });
  </script>
</body>
</html>
